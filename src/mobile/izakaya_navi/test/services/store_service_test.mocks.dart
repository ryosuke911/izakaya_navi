// Mocks generated by Mockito 5.4.4 from annotations
// in izakaya_navi/test/services/store_service_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i4;

import 'package:izakaya_navi/api/hotpepper_api.dart' as _i3;
import 'package:izakaya_navi/models/location.dart' as _i2;
import 'package:izakaya_navi/models/venue.dart' as _i5;
import 'package:izakaya_navi/services/location_service.dart' as _i6;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeLocation_0 extends _i1.SmartFake implements _i2.Location {
  _FakeLocation_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [HotpepperApi].
///
/// See the documentation for Mockito's code generation for more information.
class MockHotpepperApi extends _i1.Mock implements _i3.HotpepperApi {
  MockHotpepperApi() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i5.Venue>> searchByKeyword(String? keyword) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchByKeyword,
          [keyword],
        ),
        returnValue: _i4.Future<List<_i5.Venue>>.value(<_i5.Venue>[]),
      ) as _i4.Future<List<_i5.Venue>>);

  @override
  _i4.Future<List<_i5.Venue>> searchByFilters({
    String? keyword,
    String? name,
    String? address,
    String? area,
    List<String>? genres,
    int? partyCapacity,
    String? smoking,
    bool? privateRoom,
    bool? freeDrink,
    String? open,
    String? budget,
    double? latitude,
    double? longitude,
    String? range,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #searchByFilters,
          [],
          {
            #keyword: keyword,
            #name: name,
            #address: address,
            #area: area,
            #genres: genres,
            #partyCapacity: partyCapacity,
            #smoking: smoking,
            #privateRoom: privateRoom,
            #freeDrink: freeDrink,
            #open: open,
            #budget: budget,
            #latitude: latitude,
            #longitude: longitude,
            #range: range,
          },
        ),
        returnValue: _i4.Future<List<_i5.Venue>>.value(<_i5.Venue>[]),
      ) as _i4.Future<List<_i5.Venue>>);

  @override
  _i4.Future<_i5.Venue?> getShopDetail(String? id) => (super.noSuchMethod(
        Invocation.method(
          #getShopDetail,
          [id],
        ),
        returnValue: _i4.Future<_i5.Venue?>.value(),
      ) as _i4.Future<_i5.Venue?>);

  @override
  _i4.Future<List<Map<String, String>>> getGenres() => (super.noSuchMethod(
        Invocation.method(
          #getGenres,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, String>>>.value(
            <Map<String, String>>[]),
      ) as _i4.Future<List<Map<String, String>>>);

  @override
  _i4.Future<List<Map<String, String>>> getAreas() => (super.noSuchMethod(
        Invocation.method(
          #getAreas,
          [],
        ),
        returnValue: _i4.Future<List<Map<String, String>>>.value(
            <Map<String, String>>[]),
      ) as _i4.Future<List<Map<String, String>>>);
}

/// A class which mocks [LocationService].
///
/// See the documentation for Mockito's code generation for more information.
class MockLocationService extends _i1.Mock implements _i6.LocationService {
  MockLocationService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i2.Location> getCurrentLocation() => (super.noSuchMethod(
        Invocation.method(
          #getCurrentLocation,
          [],
        ),
        returnValue: _i4.Future<_i2.Location>.value(_FakeLocation_0(
          this,
          Invocation.method(
            #getCurrentLocation,
            [],
          ),
        )),
      ) as _i4.Future<_i2.Location>);

  @override
  _i4.Future<double> calculateDistance(
    _i2.Location? start,
    _i2.Location? end,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #calculateDistance,
          [
            start,
            end,
          ],
        ),
        returnValue: _i4.Future<double>.value(0.0),
      ) as _i4.Future<double>);
}
